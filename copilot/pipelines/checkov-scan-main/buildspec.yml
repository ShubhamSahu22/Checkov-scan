version: 0.2
phases:
  install:
    runtime-version:
      python: 3.10
    commands:
      - echo "Installing Checkov..."
      - pip install checkov
      - echo "Changing directory to $CODEBUILD_SRC_DIR"
      - cd $CODEBUILD_SRC_DIR
      # Download the Copilot Linux binary.
      - echo "Downloading Copilot CLI..."
      - wget -q https://ecs-cli-v2-release.s3.amazonaws.com/copilot-linux-v1.34.0 -O copilot-linux
      - chmod +x ./copilot-linux

  build:
    commands:
      - echo "Running Checkov scan..."
      - checkov -d . 
      - echo "Checkov scan complete."
      # Uncomment the next line to run your tests
      # - make test

  post_build:
    commands:
      - echo "Build phase complete. Preparing artifacts..."
      - ls -l
      - export COLOR="false"
      - export CI="true"
      
      # Parse the pipeline manifest
      - pipeline=$(cat $CODEBUILD_SRC_DIR/copilot/pipelines/checkov-scan-main/manifest.yml | ruby -ryaml -rjson -e 'puts JSON.pretty_generate(YAML.load(ARGF))')
      
      # Extract environments from pipeline
      - pl_envs=$(echo $pipeline | jq -r '.stages[].name')
      
      # Find all local services in the workspace
      - svc_ls_result=$(./copilot-linux svc ls --local --json)
      - svc_list=$(echo $svc_ls_result | jq '.services')
      - |
        if [ "$svc_list" != "null" ]; then
          svcs=$(echo $svc_ls_result | jq -r '.services[].name')
        fi
      
      # Find all local jobs in the workspace
      - job_ls_result=$(./copilot-linux job ls --local --json)
      - job_list=$(echo $job_ls_result | jq '.jobs')
      - |
        if [ "$job_list" != "null" ]; then
          jobs=$(echo $job_ls_result | jq -r '.jobs[].name')
        fi
      
      # Error if no services or jobs found
      - |
        if [ "$svc_list" == "null" ] && [ "$job_list" == "null" ]; then
          echo "No services or jobs found for the pipeline to deploy. Please create at least one service or job and push the manifest to the remote." 1>&2
          exit 1
        fi
      
      # Generate CloudFormation templates for each service/job and environment
      - |
        for env in $pl_envs; do
          tag=$(echo ${CODEBUILD_BUILD_ID##*:}-$env | sed 's/:/-/g' | rev | cut -c 1-128 | rev)
          
          # Package services
          for svc in $svcs; do
            ./copilot-linux svc package -n $svc -e $env --output-dir './infrastructure' --tag $tag --upload-assets
            if [ $? -ne 0 ]; then
              echo "CloudFormation stack and config files were not generated. Please check build logs for errors." 1>&2
              exit 1
            fi
          done
          
          # Package jobs
          for job in $jobs; do
            ./copilot-linux job package -n $job -e $env --output-dir './infrastructure' --tag $tag --upload-assets
            if [ $? -ne 0 ]; then
              echo "CloudFormation stack and config files were not generated. Please check build logs for errors." 1>&2
              exit 1
            fi
          done
        done
      
      - echo "CloudFormation templates generated successfully."
      - ls -lah ./infrastructure

artifacts:
  files:
    - "**/*"
    - "path/to/infrastructure/*"  # Adjust path if necessary
